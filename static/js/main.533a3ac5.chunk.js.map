{"version":3,"sources":["images/cv.pdf","images/blog.jpeg","images/motion.png","images/face-detector.png","images/edge-detector.png","images/recogniser.png","images/lineFollower.png","images/tetris.jpg","images/twitterClone.jpg","images/lockscreen.png","images/img-classify-browser.png","components/Footer.jsx","components/Navbar.jsx","components/Header.jsx","components/home.jsx","components/Projects.jsx","App.js","serviceWorker.js","index.js","piyush.jpg"],"names":["module","exports","useStyles","makeStyles","root","minWidth","maxWidth","fill","fontSize","Footer","classes","BottomNavigation","width","style","background","Link","href","BottomNavigationAction","className","padding","icon","theme","menuSliderContainer","height","avatar","display","margin","spacing","listItem","color","resumeIcon","marginLeft","marginTop","resumeText","marginBottom","textDecoration","bookIcon","bookText","cosmoText","marginRight","menuItems","listIcon","listText","listPath","Apps","Navbar","slider","useState","right","state","setState","toggleSlider","open","Box","component","AppBar","position","Toolbar","IconButton","onClick","Typography","variant","anchor","onClose","Avatar","src","alt","Divider","List","map","lsItem","key","ListItem","button","to","ListItemIcon","ListItemText","primary","Book","Pdf","title","subtitle","typedContainer","top","left","transform","textAlign","zIndex","Header","Grid","container","justify","strings","typeSpeed","backSpeed","loop","particlesCanva","Home","canvasClassName","params","particles","number","value","density","enable","value_area","shape","type","stroke","size","radom","anim","speed","size_min","sync","opacity","random","opacity_min","mainContainer","cardContainer","Projects","mergeClasses","item","x5","sm","md","Card","CardActionArea","CardMedia","image","lineFollower","CardContent","gutterBottom","CardActions","flaskDlApp","ImgClassifyBrowser","LockScreen","motionDetector","faceDetector","edgeDetector","blog","TwitterClone","tetris","App","CssBaseline","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.533a3ac5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cv.c5406938.pdf\";","module.exports = __webpack_public_path__ + \"static/media/blog.5a2e71b4.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/motion.cc66ad7e.png\";","module.exports = __webpack_public_path__ + \"static/media/face-detector.f0db4640.png\";","module.exports = __webpack_public_path__ + \"static/media/edge-detector.c6fdfc18.png\";","module.exports = __webpack_public_path__ + \"static/media/recogniser.c3e90281.png\";","module.exports = __webpack_public_path__ + \"static/media/lineFollower.8f9606d7.png\";","module.exports = __webpack_public_path__ + \"static/media/tetris.df1b4d2c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/twitterClone.b3928f23.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lockscreen.c4d170ab.png\";","module.exports = __webpack_public_path__ + \"static/media/img-classify-browser.a970194e.png\";","import React from 'react';\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core';\r\nimport { Link } from '@material-ui/core';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport GitHub from '@material-ui/icons/GitHub';\r\nimport LinkedIn from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        \"& .MuiBottomNavigationAction-root\": {\r\n            minWidth: 0,\r\n            maxWidth: 250,\r\n        },\r\n        \"& .MuiSvgIcon-root\": {\r\n            fill: \"tan\",\r\n            \"&:hover\": {\r\n                fill: \"tomato\",\r\n                fontSize: \"1.8rem\"\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst Footer = () => {\r\n    const classes= useStyles()\r\n    return (\r\n        <BottomNavigation \r\n        width=\"auto\" \r\n        style={{\r\n            background: \"#222\"}}>\r\n                <Link href=\"https://mail.google.com/mail/u/0/?view=cm&fs=1&to=piyushthakur3769@gmail.com&tf=1\">\r\n                <BottomNavigationAction\r\n                className={classes.root}\r\n                style={{padding: 0}}\r\n                icon={<EmailIcon/>}\r\n                />\r\n                </Link>\r\n                <Link href=\"https://github.com/piyush-cosmo\">\r\n                <BottomNavigationAction\r\n                className={classes.root}\r\n                style={{padding: 0}}\r\n                icon={<GitHub/>}\r\n                />\r\n                </Link>\r\n                <Link href=\"https://www.linkedin.com/in/cosmo3769/\">\r\n                <BottomNavigationAction\r\n                className={classes.root}\r\n                style={{padding: 0}}\r\n                icon={<LinkedIn/>}\r\n                />\r\n                </Link>\r\n                <Link href=\"https://www.facebook.com/profile.php?id=100009950980357\">\r\n                <BottomNavigationAction\r\n                className={classes.root}\r\n                style={{padding: 0}}\r\n                icon={<FacebookIcon/>}\r\n                />\r\n                </Link>\r\n                {/* <Link href=\"https://www.instagram.com/cosmo_3769/?hl=en\">\r\n                <BottomNavigationAction\r\n                className={classes.root}\r\n                style={{padding: 0}}\r\n                icon={<InstagramIcon/>}\r\n                />\r\n                </Link> */}\r\n        </BottomNavigation>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MobileRightMenySlider from '@material-ui/core/Drawer';\r\nimport Footer from \"./Footer\";\r\nimport Pdf from '../images/cv.pdf';\r\nimport { \r\n    AppBar,\r\n    Toolbar,\r\n    ListItem,\r\n    ListItemIcon,\r\n    IconButton,\r\n    ListItemText,\r\n    Avatar,\r\n    Divider,\r\n    List,\r\n    Typography,\r\n    Box\r\n } from '@material-ui/core';\r\n import { \r\n     Home,\r\n     Apps,\r\n     Book\r\n  } from '@material-ui/icons';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport avatar from '../piyush.jpg';\r\n\r\n//CSS STYLES\r\nconst useStyles = makeStyles(theme => ({\r\n    menuSliderContainer: {\r\n        width: \"auto\",\r\n        background: \"#222\",\r\n        height: \"100%\"\r\n    },\r\n    avatar: {\r\n        display: \"block\",\r\n        margin:\"0.5rem auto\",\r\n        width:theme.spacing(13),\r\n        height:theme.spacing(13)\r\n    },\r\n    listItem: {\r\n        color: \"tan\"\r\n    },\r\n    resumeIcon: {\r\n        marginLeft: 17,\r\n        marginTop: 10 \r\n    },\r\n    resumeText: {\r\n        marginLeft: 30,\r\n        marginBottom: 30,\r\n        textDecoration: \"none\",\r\n        color: \"tan\"\r\n    },\r\n    bookIcon: {\r\n        marginLeft: 17,\r\n        marginTop: 10 \r\n    },\r\n    bookText: {\r\n        marginLeft: 30,\r\n        marginBottom: 30,\r\n        textDecoration: \"none\",\r\n        color: \"tan\"\r\n    },\r\n    cosmoText: {\r\n        marginRight: 20,\r\n        \r\n        textDecoration: \"none\",\r\n        color: \"tan\"\r\n    }\r\n}));\r\n\r\nconst menuItems = [\r\n    {\r\n        listIcon: <Home/>,\r\n        listText: \"Home\",\r\n        listPath: \"/\"\r\n    },\r\n    // {\r\n    //     listIcon: <AssignmentInd/>,\r\n    //     listText: \"Resume\",\r\n    //     listPath: \"/resume\"\r\n    // },\r\n    {\r\n        listIcon: <Apps/>,\r\n        listText: \"projects\",\r\n        listPath: \"/projects\"\r\n    }\r\n    // {\r\n    //     listIcon: <Book />,\r\n    //     listText: \"Blog\",\r\n    //     listPath: \"/blogs\"\r\n    // }\r\n    // {\r\n    //     listIcon: <ContactMail/>,\r\n    //     listText: \"Contacts\",\r\n    //     listPath: \"/contacts\"\r\n    // }\r\n]\r\n\r\nconst Navbar = () => {\r\n    const [state, setState] = useState({\r\n        right: false\r\n    });\r\n\r\n    const toggleSlider = (slider, open) => () => {\r\n        setState({...state, [slider]: open});\r\n    };\r\n        const classes = useStyles()\r\n\r\n        const sideList = slider => (\r\n            <Box \r\n            className={classes.menuSliderContainer} \r\n            component=\"div\"\r\n            onClick={toggleSlider(slider, false)}>\r\n                <Avatar className={classes.avatar} src={avatar} alt=\"no image\"/>\r\n                <Divider />\r\n                <List>\r\n                    {menuItems.map((lsItem, key) => (\r\n                        <ListItem button key={key} component={Link} to={lsItem.listPath}>\r\n                        <ListItemIcon className={classes.listItem}>\r\n                            {lsItem.listIcon}\r\n                        </ListItemIcon>\r\n                        <ListItemText className={classes.listItem} primary={ lsItem.listText } />\r\n                        </ListItem>\r\n                    ))}\r\n                    <Book className={classes.bookIcon} style={{color: \"tan\"}} />\r\n                    <a href=\"https://tech-a-way.vercel.app/\" className={classes.bookText}>\r\n                        Blog\r\n                    </a>\r\n                    <br/>\r\n                    <AssignmentIndIcon className={classes.resumeIcon} style={{color: \"tan\"}} />\r\n                    <a href={Pdf} className={classes.resumeText}>\r\n                        Resume\r\n                    </a>\r\n                </List>\r\n            </Box>\r\n        )\r\n        return (\r\n            <>\r\n            <Box component=\"nav\">\r\n                <AppBar position=\"static\" style={{background: \"#222\"}}>\r\n                    <Toolbar>\r\n                        <IconButton onClick={toggleSlider(\"right\", true)}>\r\n                          <MenuIcon style={{color: \"white\"}} />\r\n                        </IconButton>\r\n                        <Typography variant=\"h5\" style={{color:\"tan\"}}>\r\n                            <a href=\"/\" className={classes.bookText}>cosmo</a>\r\n                        </Typography>\r\n                        <MobileRightMenySlider \r\n                        anchor=\"right\" \r\n                        open={state.right}\r\n                        onClose={toggleSlider(\"right\", false)}>\r\n                            {sideList(\"right\")}\r\n                            <Footer />\r\n                        </MobileRightMenySlider>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            </>\r\n    );\r\n  }\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { \r\n    Typography,\r\n    Avatar,\r\n    Grid,\r\n    Box\r\n } from '@material-ui/core';\r\nimport Typed from \"react-typed\";\r\nimport avatar from \"../piyush.jpg\";\r\n\r\n//Css \r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        width: theme.spacing(15),\r\n        height: theme.spacing(15),\r\n        margin: theme.spacing(1)\r\n    },\r\n    title: {\r\n        color: \"tan\"\r\n    },\r\n    subtitle: {\r\n        color: \"tan\",\r\n        marginBottom: \"3rem\"\r\n    },\r\n    typedContainer: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        textAlign: \"center\",\r\n        zIndex: 1\r\n    }\r\n}))\r\n\r\nconst Header = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Box className={classes.typedContainer}>\r\n            <Grid container justify=\"center\">\r\n               <Avatar className={classes.avatar} src={avatar} alt=\"no image\"/>\r\n            </Grid>\r\n            <Typography className={classes.title} variant=\"h4\">\r\n                <Typed strings={[\"PIYUSH THAKUR\"]} typeSpeed={40} />\r\n            </Typography>\r\n            <br/>\r\n            <Typography className={classes.subtitle} variant=\"h5\">\r\n            <Typed strings={[\"Robotics\",\"ML | DL\",\"Full Stack Developer\"]} \r\n            typeSpeed={40}\r\n            backSpeed={60}\r\n            loop />\r\n        </Typography>\r\n        \r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport Navbar from './Navbar';\r\nimport Header from \"./Header\";\r\nimport Particles from \"react-particles-js\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    particlesCanva: {\r\n        position: \"absolute\"\r\n    }\r\n})\r\n\r\nconst Home = () => {\r\n    const classes = useStyles()\r\n        return (\r\n            <>\r\n                <Navbar/>\r\n                <Header />\r\n                <Particles \r\n                canvasClassName={classes.particlesCanva}\r\n                params={{\r\n                    particles:{\r\n                        number:{\r\n                            value: 45,\r\n                            density: {\r\n                                enable: false,\r\n                                value_area: 900\r\n                            }\r\n                        },\r\n                        shape: {\r\n                            type: \"circle\",\r\n                            stroke: {\r\n                                width: 1,\r\n                                color: \"tomato\"\r\n                            }\r\n                        },\r\n                        size: {\r\n                            value: 8,\r\n                            radom: true,\r\n                            anim: {\r\n                                enable: true,\r\n                                speed: 6,\r\n                                size_min: 0.1,\r\n                                sync: true\r\n                            }\r\n                        },\r\n                        opacity: {\r\n                            value: 1,\r\n                            random: true,\r\n                            anim: {\r\n                                enable: true,\r\n                                speed: 1,\r\n                                opacity_min: 0.1,\r\n                                sync: true\r\n                            }\r\n                        }\r\n                    }\r\n                }}/>\r\n                \r\n            </>\r\n        );\r\n    }\r\n\r\nexport default Home; ","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {Link} from \"@material-ui/core\";\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Card,\r\n    CardActionArea,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {mergeClasses} from '@material-ui/styles';\r\nimport Navbar from \"./Navbar\";\r\n\r\nimport blog from \"../images/blog.jpeg\";\r\nimport motionDetector from \"../images/motion.png\";\r\nimport faceDetector from \"../images/face-detector.png\";\r\nimport edgeDetector from \"../images/edge-detector.png\";\r\nimport flaskDlApp from \"../images/recogniser.png\";\r\nimport lineFollower from \"../images/lineFollower.png\";\r\nimport tetris from \"../images/tetris.jpg\";\r\nimport TwitterClone from \"../images/twitterClone.jpg\";\r\nimport LockScreen from \"../images/lockscreen.png\";\r\nimport ImgClassifyBrowser from \"../images/img-classify-browser.png\";\r\n\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\n\r\nconst useStyles = makeStyles({\r\n    mainContainer: {\r\n        background: \"#233\",\r\n        height: \"100%\"\r\n    },\r\n    cardContainer: {\r\n        maxWidth: 345,\r\n        margin: \"5rem auto\"\r\n    }\r\n})\r\n\r\nconst Projects = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Box component=\"div\" className={mergeClasses.mainContainer}>\r\n            <Navbar />\r\n            <Grid container justify=\"center\">\r\n                {/*line follower*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"lineFollower\"\r\n                            height=\"140\"\r\n                            image={lineFollower} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Line Follower Bot\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project of Line Follower Bot is done with Arduino, ir8array sensor, L298 motor driver. It follows black/white line.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/RACLOF\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*hanwritten-digit-recogniser-app*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"HandWrittenDigitRecogniser\"\r\n                            height=\"140\"\r\n                            image={flaskDlApp} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    HandWrittenDigitRecogniser app\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project of detecting handwritten digits is done with deep learning and flask. Deep learning was used to train \r\n                                    on MNIST dataset and Flask was used to get the api to render on browser.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/DL_FLASK_WEB_APP\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*image-classification on browser*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"image-classification on browser\"\r\n                            height=\"140\"\r\n                            image={ImgClassifyBrowser} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Image Classification On Browser\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project was to classify the images using ML techniques and to be used on a client side.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/mobileNet_node_Browser\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*Lock Laptop Screen*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"Lock Laptop Screen\"\r\n                            height=\"140\"\r\n                            image={LockScreen} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Lock Laptop Screen\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project is to lock Laptop screen using openCV and DL techniques. \r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/lock_unlock_laptop_face_recognition\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*motion-detector*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"motion-detector\"\r\n                            height=\"140\"\r\n                            image={motionDetector} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Motion_Detector_openCV\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project of detecting motion is done with openCV. \r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/motion_detector_using_openCV\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*face-detector*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"face-detector\"\r\n                            height=\"140\"\r\n                            image={faceDetector} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Face_Detector_openCV\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project of detecting face is done with openCV and pretrained HaarCascade model. \r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/face_recognition_opencv_cascade\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*edge-detector*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"edge-detector\"\r\n                            height=\"140\"\r\n                            image={edgeDetector} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Edge_Detector_openCV\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This project of detecting edges is done with openCV and Canny edge function.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/canny_edge_detection_openCV\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*blog*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"blog\"\r\n                            height=\"140\"\r\n                            image={blog} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Blog\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This is blogging website where all the blogs will be found.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                                <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/Tech-A-WAY\">\r\n                                    Github\r\n                                </Link>\r\n                                <PlayCircleFilledIcon />\r\n                                <Link href=\"https://tech-a-way.vercel.app/\">\r\n                                    Live\r\n                                </Link>\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*twitter-clone*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"twitter-clone\"\r\n                            height=\"140\"\r\n                            image={TwitterClone} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Twitter Clone\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This is a Twitter clone build with FERN stack.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/firebase-practise\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n                {/*tetris*/}\r\n                <Grid item x5={12} sm={8} md={6}>\r\n                <Card className={classes.cardContainer}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\"tetris\"\r\n                            height=\"140\"\r\n                            image={tetris} />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\">\r\n                                    Tetris\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    This is a basic Tetris game.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                            <GitHubIcon />\r\n                                <Link href=\"https://github.com/piyush-cosmo/TETRIS\">\r\n                                    Github\r\n                                </Link>\r\n                                {/* <Button size=\"small\" color=\"primary\">\r\n                                    Livedemo\r\n                                </Button> */}\r\n                            </CardActions>\r\n                </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport \"./App.css\";\r\nimport Home from './components/home';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n// import Resume from \"./components/Resume\";\r\nimport Projects from \"./components/Projects\";\r\n// import Blog from \"./components/blog\";\r\n//import Contacts from \"./components/Contacts\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Route exact path=\"/\" component={Home}/>\r\n      {/* <Route path=\"/resume\" component={Resume}/> */}\r\n      <Route path=\"/projects\" component={Projects}/>\r\n      {/* <Route path=\"/blogs\" component={Blog}/> */}\r\n      {/* <Route path=\"/contacts\" component={Contacts}/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n  \r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/piyush.8da0aa5d.jpg\";"],"sourceRoot":""}